import 'dart:io';

void main() {
  final file = File('coverage/lcov.info');
  if (!file.existsSync()) {
    print('‚ùå No se encontr√≥ el archivo de cobertura');
    return;
  }

  final lines = file.readAsLinesSync();

  int totalLines = 0;
  int hitLines = 0;
  int totalFiles = 0;

  Map<String, Map<String, int>> fileStats = {};
  String? currentFile;

  for (String line in lines) {
    if (line.startsWith('SF:')) {
      currentFile = line.substring(3);
      totalFiles++;
      fileStats[currentFile] = {'total': 0, 'hit': 0};
    } else if (line.startsWith('LF:')) {
      int linesFound = int.parse(line.substring(3));
      totalLines += linesFound;
      if (currentFile != null) {
        fileStats[currentFile]!['total'] = linesFound;
      }
    } else if (line.startsWith('LH:')) {
      int linesHit = int.parse(line.substring(3));
      hitLines += linesHit;
      if (currentFile != null) {
        fileStats[currentFile]!['hit'] = linesHit;
      }
    }
  }

  double overallCoverage = totalLines > 0 ? (hitLines / totalLines) * 100 : 0;

  print('üìä REPORTE DE COBERTURA DE TESTS');
  print('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  print('');
  print('üéØ RESUMEN GENERAL:');
  print('   ‚Ä¢ Archivos analizados: $totalFiles');
  print('   ‚Ä¢ L√≠neas totales: $totalLines');
  print('   ‚Ä¢ L√≠neas cubiertas: $hitLines');
  print('   ‚Ä¢ Cobertura general: ${overallCoverage.toStringAsFixed(2)}%');
  print('');

  // Determinar el nivel de cobertura
  String level;
  String emoji;
  if (overallCoverage >= 95) {
    level = 'EXCELENTE';
    emoji = 'üèÜ';
  } else if (overallCoverage >= 90) {
    level = 'MUY BUENA';
    emoji = 'ü•á';
  } else if (overallCoverage >= 80) {
    level = 'BUENA';
    emoji = 'üëç';
  } else if (overallCoverage >= 70) {
    level = 'ACEPTABLE';
    emoji = '‚ö†Ô∏è';
  } else {
    level = 'INSUFICIENTE';
    emoji = '‚ùå';
  }

  print('$emoji CALIFICACI√ìN: $level');
  print('');

  print('üìÅ COBERTURA POR ARCHIVO:');
  print('');

  fileStats.forEach((file, stats) {
    String fileName = file.split('/').last;
    double fileCoverage = stats['total']! > 0 ? (stats['hit']! / stats['total']!) * 100 : 0;
    String fileEmoji = fileCoverage >= 90 ? '‚úÖ' : fileCoverage >= 70 ? '‚ö†Ô∏è' : '‚ùå';

    print('   $fileEmoji $fileName');
    print('      L√≠neas: ${stats['hit']}/${stats['total']} (${fileCoverage.toStringAsFixed(1)}%)');
  });

  print('');
  print('üéØ AN√ÅLISIS DE CALIDAD:');

  if (overallCoverage >= 90) {
    print('   ‚úÖ Excelente cobertura de tests');
    print('   ‚úÖ C√≥digo bien protegido contra regresiones');
    print('   ‚úÖ Listo para producci√≥n');
  } else if (overallCoverage >= 80) {
    print('   üëç Buena cobertura de tests');
    print('   ‚ö†Ô∏è  Considerar a√±adir m√°s tests para casos edge');
  } else {
    print('   ‚ùå Cobertura insuficiente');
    print('   üîß Se requieren m√°s tests antes de producci√≥n');
  }

  print('');
  print('üöÄ RECOMENDACIONES:');

  if (overallCoverage >= 95) {
    print('   ‚Ä¢ Mantener el nivel actual de cobertura');
    print('   ‚Ä¢ Considerar tests de mutaci√≥n para mayor robustez');
  } else if (overallCoverage >= 90) {
    print('   ‚Ä¢ Objetivo: alcanzar 95%+ de cobertura');
    print('   ‚Ä¢ Enfocarse en casos edge no cubiertos');
  } else {
    print('   ‚Ä¢ Prioridad: aumentar cobertura a 90%+');
    print('   ‚Ä¢ A√±adir tests para l√≠neas no cubiertas');
    print('   ‚Ä¢ Revisar casos de error no testeados');
  }
}